#!/bin/bash

RELEASE_DIR="$PWD/release"
DEPLOY_DIR="$PWD/deploy"
CACHE_DIR="$RELEASE_DIR/cache"
ASSETS_DIR="$DEPLOY_DIR/assets"

identity="B877B883D9B68E3FD5F9A9B0F275AD46E5ED70BF"
identity_name="Developer ID Application: Octoblu Inc. (JLSZ8Q5945)"

build_app(){
  echo "### building app"
  local platform="$1"
  local arch=$(get_node_arch "$2")
  local skip="$3"
  local base_dir="$(get_base_dir "$platform" "$arch")"
  if [ "$skip" == "1" -a -d "${base_dir}" ]; then
    echo "### skipping build"
  else
    npm run package -- --platform "$platform" --arch "$arch"
  fi
}

build_dmg(){
  echo "### building dmg"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  local app="$CACHE_DIR/MeshbluConnectorInstaller.app"
  local dmg="$CACHE_DIR/MeshbluConnectorInstaller.dmg"
  if [ ! -d "$app" ]; then
    clean_up "$platform" "$arch" > /dev/null
    echo "ERROR: App didn't build properly"
    echo "Expected $app to exist"
    exit 1
  fi
  umount "/Volumes/MeshbluConnectorInstaller" > /dev/null 2>&1
  $DEPLOY_DIR/create-dmg --volname "MeshbluConnectorInstaller" \
    --volicon "$ASSETS_DIR/drive-icon.icns" \
    --background "$ASSETS_DIR/background.png" \
    --window-size 512 524 \
    --icon-size 128 \
    --icon "MeshbluConnectorInstaller.app" 256 200 \
    --hide-extension "MeshbluConnectorInstaller.app" \
    "$dmg" \
    "$app"
}

bundle_app(){
  echo "### bundling"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  if [ "$platform" == "darwin" ]; then
    build_dmg "$platform" "$arch"
  else
    zip_app "$platform" "$arch"
  fi
}

clean_up(){
  echo "### cleaning up"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  local base_dir="$(get_base_dir "$platform" "$arch")"

  if [ "$platform" == "darwin" ]; then
    echo "### remove keychain"
    security delete-keychain mac-build.keychain
  fi
  echo "### Removing old release folders"
  rm -rf "$base_dir"
}

create_keychain(){
  echo "### create keychain"
  local key_password="$1"
  security create-keychain -p travis mac-build.keychain
  security import $DEPLOY_DIR/certs/apple.cer -k ~/Library/Keychains/mac-build.keychain -T /usr/bin/codesign
  security import $DEPLOY_DIR/certs/app.p12 -k ~/Library/Keychains/mac-build.keychain -P "$key_password" -T /usr/bin/codesign -T /usr/bin/productbuild
}

get_base_dir(){
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  echo "$RELEASE_DIR/MeshbluConnectorInstaller-${platform}-${arch}"
}

get_node_arch(){
  local arch="$1"
  if [ "$arch" == "386" ]; then
    echo "ia32"
  fi
  if [ "$arch" == "amd64" ]; then
    echo "x64"
  fi
  echo "$arch"
}

move_app(){
  echo "### moving app"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  local base_dir="$(get_base_dir "$platform" "$arch")"
  if [ "$platform" == "darwin" ]; then
    mkdir -p "$CACHE_DIR"
    cp -R "${base_dir}/MeshbluConnectorInstaller.app" "$CACHE_DIR/"
  fi
}

move_bundle(){
  echo "### moving app"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  local base_dir="$(get_base_dir "$platform" "$arch")"
  if [ "$platform" == "darwin" ]; then
    mv "${CACHE_DIR}/MeshbluConnectorInstaller.dmg" "$RELEASE_DIR/MeshbluConnectorInstaller-${platform}-${arch}.dmg"
  else
    mv "${base_dir}/MeshbluConnectorInstaller.zip" "$RELEASE_DIR/MeshbluConnectorInstaller-${platform}-${arch}.zip"
  fi
}

setup(){
  echo "### setting up"
  local platform="$1"
  local arch="$(get_node_arch "$2")"
  rm -rf "$RELEASE_DIR/*${platform}-${arch}.*"
  rm -rf "$CACHE_DIR"
  mkdir -p "$CACHE_DIR"
}

sign_thing() {
  local path="$1"
  local key="$HOME/Library/Keychains/mac-build.keychain"
  codesign --deep --force --verbose --verify --keychain "$key" --sign "$identity" "$path"
}

sign_package(){
  local app="$CACHE_DIR/MeshbluConnectorInstaller.app"
  echo "### signing dependencies"
  local sign_these=(
    "MeshbluConnectorInstaller Helper.app"
    "MeshbluConnectorInstaller Helper NP.app"
    "MeshbluConnectorInstaller Helper EH.app"
    "Squirrel.framework/Squirrel"
    "Squirrel.framework"
    "ReactiveCocoa.framework/ReactiveCocoa"
    "ReactiveCocoa.framework"
    "Mantle.framework/Mantle"
    "Mantle.framework"
    "Electron Framework.framework/Libraries/libnode.dylib"
    "Electron Framework.framework/Electron Framework"
    "Electron Framework.framework"
  )
  for thing in "${sign_these[@]}"; do
    sign_thing "$app/Contents/Frameworks/$thing"
  done

  echo "### signing package"
  sign_thing "$app"
}

verify_signature(){
  echo "### verifying signature"
  codesign -vvv -d "$CACHE_DIR/MeshbluConnectorInstaller.app"
}

zip_app() {
  echo "### zipping app"

  local platform="$1"
  local arch="$(get_node_arch "$2")"
  local base_dir="$(get_base_dir "$platform" "$arch")"
  if [ ! -f "$base_dir/MeshbluConnectorInstaller" -a "$platform" == "linux" ]; then
    echo "ERROR: App didn't build properly"
    echo "Expected $base_dir/MeshbluConnectorInstaller to exist"
    exit 1
  fi
  if [ ! -f "$base_dir/MeshbluConnectorInstaller.exe" -a "$platform" == "windows" ]; then
    echo "ERROR: App didn't build properly"
    echo "Expected $base_dir/MeshbluConnectorInstaller.exe to exist"
    exit 1
  fi
  pushd $base_dir &> /dev/null
    zip -r -X MeshbluConnectorInstaller.zip * > /dev/null
  popd &> /dev/null
}

main(){
  if [ -z "$PLATFORM" -a -z "$TRAVIS_OS_NAME" ]; then
    echo "PLATFORM or TRAVIS_OS_NAME is blank"
    exit 1
  fi
  if [ -z "$ARCH" ]; then
    echo "ARCH is blank"
    exit 1
  fi

  local platform="$PLATFORM"
  local arch="$ARCH"

  if [ -z "$platform" ]; then
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      platform="darwin"
    else
      platform="$TRAVIS_OS_NAME"
    fi
  fi

  if [ -z "$KEY_PASSWORD" -a "$platform" == "darwin" ]; then
    echo "KEY_PASSWORD is required for darwin"
    exit 1
  fi

  local skip="0"
  if [ "$1" == "--skip-build" ]; then
    skip="1"
  fi

  local key_password="$KEY_PASSWORD"

  echo "### building ${platform}-${arch}"
  setup "$platform" "$arch"
  build_app "$platform" "$arch" "$skip"
  move_app "$platform" "$arch"
  if [ "$platform" == "darwin" ]; then
    create_keychain "$key_password"
    sign_package
    verify_signature
  fi
  bundle_app "$platform" "$arch"
  move_bundle "$platform" "$arch"
  clean_up "$platform" "$arch"
}

main "$@"
